<?php

/**
 * Section
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Lavita
 * @subpackage model
 * @author     AlexanderDupree
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Section extends BaseSection
{
    const kIdKey = "id";
    const kNameKey = "name";
    const kSlugKey = "slug";
    const kParentIdKey = "parent_id";
    const kTypeKey = "type";
    const kPriorityKey = "priority";

    /*
     * Create Section
     * This method creates new section according to incoming params
    */
    public static function createNewSectionWithParams($params)
    {
        $sectionObject = new Section();

        $sectionObject->setName($params[self::kNameKey]);
        $sectionObject->setSlug($params[self::kSlugKey]);
        $sectionObject->setParentId($params[self::kParentIdKey]);
        $sectionObject->setType($params[self::kTypeKey]);
        $sectionObject->setPriority($params[self::kPriorityKey]=="on" ? 1 : 0);
        $sectionObject->setCreatedAt(date("Y-m-d H:m:s"));
        $sectionObject->setUpdatedAt(date("Y-m-d H:m:s"));
        $sectionObject->save();
    }

    /*
     * Update Section
     * This method updates concrete section according to incoming params
    */
    public static function updateSectionWithParams($params)
    {
        if(!$params[self::kIdKey])
            return;

       $concreteSection =  SectionTable::getInstance()->findOneBy(self::kIdKey, $params[self::kIdKey]);

        if(count($concreteSection) == 0)
            return;

        $concreteSection->setName($params[self::kNameKey]);
        $concreteSection->setSlug($params[self::kSlugKey]);
        $concreteSection->setParentId($params[self::kParentIdKey]);
        $concreteSection->setType($params[self::kTypeKey]);
        $concreteSection->setPriority($params[self::kPriorityKey]=="on" ? 1 : 0);
        $concreteSection->setCreatedAt($concreteSection->getCreatedAt());
        $concreteSection->setUpdatedAt(date("Y-m-d H:m:s"));
        $concreteSection->save();
    }

    /*
     * Delete Section
     * This method deletes concrete section according to incoming identifier
    */
    public static function deleteSectionWithIdentifier($identifier)
    {
        $concreteSection = SectionTable::getInstance()->findOneBy(self::kIdKey, $identifier);

        if(count($concreteSection)>0)
            $concreteSection->delete();
    }
}
