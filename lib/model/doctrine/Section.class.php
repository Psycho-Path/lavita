<?php

/**
 * Section
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Lavita
 * @subpackage model
 * @author     AlexanderDupree
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Section extends BaseSection
{
    const kIdKey = "id";
    const kNameKey = "name";
    const kSlugKey = "slug";
    const kParentIdKey = "parent_id";
    const kTypeKey = "type";
    const kPriorityKey = "priority";
    const kImageKey = "image";

    /**
     * Create Section
     * This method creates new section according to incoming params
    */
    public static function createNewSectionWithParams($params)
    {
        $sectionObject = new Section();

        $sectionObject->setName($params[self::kNameKey]);
        $sectionObject->setSlug($params[self::kSlugKey]);
        $sectionObject->setParentId($params[self::kParentIdKey]);
        $sectionObject->setType($params[self::kTypeKey]);
        $sectionObject->setPriority($params[self::kPriorityKey]=="on" ? 1 : 0);
        $sectionObject->setImage($params[self::kImageKey]);
        $sectionObject->setCreatedAt(date("Y-m-d H:m:s"));
        $sectionObject->setUpdatedAt(date("Y-m-d H:m:s"));
        $sectionObject->save();

        if($sectionObject->getType() == "WithListContent")
        {
            $emptyContent = new Content();

            $emptyContent->setHtml("<div>empty</div>");
            $emptyContent->setSectionId($sectionObject->getId());
            $emptyContent->setVisibility(true);
            $sectionObject->setCreatedAt(date("Y-m-d H:m:s"));
            $sectionObject->setUpdatedAt(date("Y-m-d H:m:s"));
            $emptyContent->setSection($sectionObject);

            $emptyContent->save();
        }
    }

    /**
     * Update Section
     * This method updates concrete section according to incoming params
    */
    public static function updateSectionWithParams($params)
    {
        if(!$params[self::kIdKey])
            return;

       $concreteSection =  SectionTable::getInstance()->findOneBy(self::kIdKey, $params[self::kIdKey]);

        if(count($concreteSection) == 0)
            return;

        $concreteSection->setName($params[self::kNameKey]);
        $concreteSection->setSlug($params[self::kSlugKey]);
        $concreteSection->setParentId($params[self::kParentIdKey]);
        $concreteSection->setType($params[self::kTypeKey]);
        $concreteSection->setPriority($params[self::kPriorityKey]=="on" ? 1 : 0);
        $concreteSection->setImage($params[self::kImageKey]);
        $concreteSection->setCreatedAt($concreteSection->getCreatedAt());
        $concreteSection->setUpdatedAt(date("Y-m-d H:m:s"));
        $concreteSection->save();

        if($concreteSection->getType() == "WithListContent")
        {
            $emptyContent = new Content();

            $emptyContent->setHtml("<div>empty</div>");
            $emptyContent->setSectionId($concreteSection->getId());
            $emptyContent->setVisibility(true);
            $emptyContent->setCreatedAt(date("Y-m-d H:m:s"));
            $emptyContent->setUpdatedAt(date("Y-m-d H:m:s"));
            $emptyContent->setSection($concreteSection);

            $emptyContent->save();
        }
    }

    /**
     * Delete Section
     * This method deletes concrete section according to incoming identifier
    */
    public static function deleteSectionWithIdentifier($identifier)
    {
        $concreteSection = SectionTable::getInstance()->findOneBy(self::kIdKey, $identifier);

        if(count($concreteSection)>0)
        {
            $sectionsContent = ContentTable::getInstance()->findOneBy("section_id", $concreteSection->getId());
            if(count($sectionsContent)>0)
            {
                $sectionsContent->delete();
            }
            $concreteSection->delete();
        }
    }

    /**
     * Foreground content source
     * This method gets foreground content html source
     *
     * @return Section
    */
    public static function getForegroundContentSource(Section $section)
    {
        $foregraundSection = SectionTable::getInstance()
            ->createQuery("fs")
            ->select("fs.*")
            ->where("fs.parent_id = ?", $section->getId())
            ->andWhere("fs.priority = ?", true)
            ->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD);

        return $foregraundSection->getContent();
    }

    /**
     * Subsections getter
     * This method gets current section subsections
     *
     * @return Section
    */
    public static function getSubsections(Section $section)
    {
        return SectionTable::getInstance()
            ->createQuery("ss")
            ->select("ss.*")
            ->where("ss.parent_id = ?", $section->getId())
            ->execute();
    }

    /**
     * @return Section
     */
    public static function getFirstLevelSectionForSection(Section $section)
    {
        if($section->getParentId())
        {
            $flSection = self::oneLevelUpSection($section);
            return $flSection;
        }
    }

    /**
    * @return Section
    */
    private static function oneLevelUpSection(Section $section)
    {
        $parentSection = SectionTable::getInstance()->findOneBy("id", $section->getParentId());
        if($parentSection->getId() != self::getRootSection()->getId())
            return self::oneLevelUpSection($parentSection);
        else
            return $section;
    }

    /**
    * @return Section
    */
    private static function getRootSection()
    {
        return SectionTable::getInstance()->findOneBy("parent_id", 0);
    }
}
